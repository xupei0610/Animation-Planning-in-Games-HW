"#version 420 core\n"
""
"layout(location = 5) in vec2 vertices;"
"layout(location = 0) in vec3 pos;"
"layout(location = 1) in vec2 scal_rot;"
"layout(location = 2) in vec4 color;"
"layout(location = 3) in vec2 uv;"
"layout(location = 4) in vec2 uv_offset;"
""
"out vec4 gColor;"
"out vec2 gTextureCoord;"
""
"layout (std140, binding = 0) uniform GlobalAttributes"
"{"
"   mat4 view;"
"   mat4 proj;"
"   vec3 cam_pos;"
"};"
""
"uniform int use_texture;"
"uniform int use_atlas;"
""
"const mat2 ROT_MAT_COS = mat2(1, 0, 0, 1);"
"const mat2 ROT_MAT_SIN = mat2(0, 1, -1, 0);"
""
"void main()"
"{"
""
"   float rot = scal_rot.y / 180.f;"
"   vec2 vert;"
"   if (rot - floor(rot) == 0.f)"
"       vert = vertices;"
"   else"
"       vert =  (cos(rot * 3.1415926535f) * ROT_MAT_COS  + sin(rot * 3.1415926535f) * ROT_MAT_SIN) * vertices;"
""
"   vec3 right_vec = vec3(view[0][0], view[1][0], view[2][0]);"
"   vec3 up_vec = vec3(view[0][1], view[1][1], view[2][1]);"
"	vec3 vertex_pos = pos"
"	        + (right_vec * vert.x +  up_vec * vert.y) * scal_rot.x;"
""
"	gl_Position = proj * view * vec4(vertex_pos, 1.0f);"
""
"	gColor = color;"
"   if (use_texture == 1)"
"   {"
"       if (use_atlas == 1)"
"           gTextureCoord = vec2(uv.x+uv_offset.x, uv.y+uv_offset.y);"
"       else"
"           gTextureCoord = uv;"
"   }"
"}"
