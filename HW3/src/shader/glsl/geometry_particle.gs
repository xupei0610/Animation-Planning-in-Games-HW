"#version 420 core\n"
"\n#define TOTAL_VERTICES 64\n"
""
"layout (points) in;"
"layout (triangle_strip, max_vertices = TOTAL_VERTICES) out;"
""
"layout (std140, binding = 0) uniform GlobalAttributes"
"{"
"   mat4 view;"
"   mat4 proj;"
"   vec3 cam_pos;"
"};"
""
"in VS_OUT"
"{"
"   vec2 scal_rot;"
"   vec4 color;"
"   vec2 uv_offset;"
"} primitive[];"
""
"out vec4 gColor;"
"out vec2 gTextureCoord;"
""
"const mat2 ROT_MAT_COS = mat2(1, 0, 0, 1);"
"const mat2 ROT_MAT_SIN = mat2(0, 1, -1, 0);"
""
"uniform float vertices[TOTAL_VERTICES*2];"
"uniform int n_vertices;"
"uniform float uv[TOTAL_VERTICES*2];"
""
"uniform int use_texture;"
"uniform int use_atlas;"
"void main()"
"{"
"   mat4 VP = proj * view;"
"   vec3 right_vec = vec3(view[0][0], view[1][0], view[2][0]) * primitive[0].scal_rot.x;"
"   vec3 up_vec = vec3(view[0][1], view[1][1], view[2][1]) * primitive[0].scal_rot.x;"
""
"   float rot = primitive[0].scal_rot.y / 180.f;"
"   mat2 rot_mat = mat2(1, 0, 0, 1);"
"   if (rot - floor(rot) != 0.f)"
"       rot_mat = cos(rot * 3.1415926535f) * ROT_MAT_COS  + sin(rot * 3.1415926535f) * ROT_MAT_SIN;"
"   gColor = primitive[0].color;"
""
"   vec2 vert;"
"   for (int i = 0, idx = 0; i < n_vertices; ++i, idx += 2)"
"   {"
"       vert = rot_mat * vec2(vertices[idx], vertices[idx+1]);"
"       gl_Position = VP *"
"           vec4(gl_in[0].gl_Position.xyz + (right_vec * vert.x +  up_vec * vert.y), 1.f);"
"       if (use_texture == 1)"
"       {"
"           if (use_atlas == 1)"
"               gTextureCoord = vec2(uv[idx]+primitive[0].uv_offset.x, uv[idx+1]+primitive[0].uv_offset.y);"
"           else"
"               gTextureCoord = vec2(uv[idx], uv[idx+1]);"
"       }"
"       EmitVertex();"
"   }"
"   EndPrimitive();"
"}"
