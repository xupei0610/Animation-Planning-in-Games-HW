"#version 330 core\n"
"out vec3 color;"
""
"uniform sampler2D gPosition;"
"uniform sampler2D gColor;"
"uniform sampler2D gView;"
"uniform sampler2D gNormal;"
"uniform sampler2D gDiffuse;"
"uniform sampler2D gSpecular;"
""
"in vec2 tex_coords;"
""
"struct PointLight"
"{"
"   vec3 pos;"
"   vec3 ambient;"
"   vec3 diffuse;"
"   vec3 specular;"
"   float coef_a0;"
"   float coef_a1;"
"   float coef_a2;"
"};"
"\n#define MAX_POINT_LIGHTS 100\n"
"uniform PointLight light[MAX_POINT_LIGHTS];"
""
"uniform int tot_light;"
""
"void main()"
"{"
"    color = texture(gColor, tex_coords).rgb;"
""
"    vec3 frag_pos = texture(gPosition, tex_coords).rgb;"
"    vec3 view = texture(gView, tex_coords).rgb;"
"    vec3 norm = texture(gNormal, tex_coords).rgb;"
"    vec3 diffuse = texture(gDiffuse, tex_coords).rgb;"
"    vec3 specular = texture(gSpecular, tex_coords).rgb;"
"    float shininess = texture(gSpecular, tex_coords).a;"
""
"    for (int i = 0; i < tot_light; ++i)"
"    {"
"       if (color.r >= 1 && color.g >= 1 && color.b >= 1) return;"
""
"       if (light[i].coef_a0 != 0.f || light[i].coef_a1 != 0.f || light[i].coef_a2 != 0.f)"
"       {"
"           vec3 L = light[i].pos - frag_pos;"
"           float dist = length(L);"
"           float max_light = max(max(light[i].diffuse.x, light[i].diffuse.y), light[i].diffuse.z);"
"           float radius = (-light[i].coef_a2 + sqrt(light[i].coef_a1 * light[i].coef_a1 - 4 * light[i].coef_a2 * (light[i].coef_a0 - (256.0f / 5.0f) * max_light))) / (2.0f * light[i].coef_a2);"
"           if (dist < radius)"
"           {"
"               L /= dist;"
"               vec3 R = reflect(-L, norm);"
""
"               float diff = max(dot(norm, L), 0.0);"
"               float spec = pow(max(dot(view, R), 0.0), shininess);"
""
"               float atten = 1.0f / (light[i].coef_a0 + light[i].coef_a1 * dist + light[i].coef_a2*dist*dist);"
""
"               vec3 a = light[i].ambient  * diffuse;"
"               vec3 d = light[i].diffuse  * diff * diffuse;"
"               vec3 s = light[i].specular * spec * specular;"
""
"               color += (a + d + s) * atten;"
"           }"
"       }"
"    }"
"}"
